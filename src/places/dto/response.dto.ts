// Swagger decorator for API documentation
import { ApiProperty } from '@nestjs/swagger';

/**
 * ApiResponseDto - Base response structure for all API endpoints
 * 
 * This is the foundation DTO that provides a consistent response format
 * across all API endpoints in the application.
 * 
 * Standard Fields:
 * - success: Boolean indicating if the operation completed successfully
 * - response: The actual response data (string or object)
 * - timestamp: ISO timestamp of when the response was generated
 * 
 * Extended by:
 * - ChatResponseDto: For chat-based endpoints
 * - SearchResponseDto: For search endpoints with additional metadata
 */
export class ApiResponseDto {
  @ApiProperty({
    description: 'Whether the request was successful - true for successful operations, false for errors',
    example: true,
  })
  success: boolean;

  @ApiProperty({
    description: 'Response message or data - contains the actual result of the operation',
    example: 'Operation completed successfully',
  })
  response: string;

  @ApiProperty({
    description: 'Timestamp of the response in ISO format - when the response was generated',
    example: '2024-08-13T10:30:00.000Z',
  })
  timestamp: string;
}

/**
 * ChatResponseDto - Response structure for chat endpoints
 * 
 * Extends ApiResponseDto to provide specific typing for chat-based interactions.
 * Used by legacy chat endpoints that return text responses from AI agents.
 * 
 * Endpoints using this DTO:
 * - POST /api/places/chat
 * - GET /api/places/location
 * 
 * The response field contains the AI agent's natural language response.
 */
export class ChatResponseDto extends ApiResponseDto {
  @ApiProperty({
    description: 'AI agent response to the user message - natural language text generated by location intelligence agents',
    example: 'I found 5 restaurants near your location...',
  })
  declare response: string;
}

/**
 * SearchResponseDto - Response structure for parameterized search endpoints
 * 
 * Extends ApiResponseDto with additional metadata about the search operation.
 * Used by the GET /api/places/search endpoint that converts query parameters
 * into natural language for agent processing.
 * 
 * Additional Fields:
 * - originalQuery: The raw search query from URL parameters
 * - searchMessage: The constructed natural language message sent to agents
 * 
 * This helps users understand how their parameterized search was interpreted.
 */
export class SearchResponseDto extends ApiResponseDto {
  @ApiProperty({
    description: 'Original search query from URL parameters - the raw query string provided by user',
    example: 'restaurants',
  })
  originalQuery: string;

  @ApiProperty({
    description: 'Natural language message sent to agent - how the parameters were converted to natural language',
    example: 'Search for "restaurants" near coordinates 40.7128, -74.0060',
  })
  searchMessage: string;
}

/**
 * HealthResponseDto - Response structure for health check endpoints
 * 
 * Simple DTO for service health monitoring. Used by monitoring systems
 * and load balancers to verify service availability.
 * 
 * Endpoint: GET /api/places/health
 * 
 * Always returns 'healthy' status with current timestamp.
 * Future enhancements could include dependency health checks.
 */
export class HealthResponseDto {
  @ApiProperty({
    description: 'Health status of the service - indicates if the service is operational',
    example: 'healthy',
  })
  status: string;

  @ApiProperty({
    description: 'Timestamp of the health check in ISO format - when the health check was performed',
    example: '2024-08-13T10:30:00.000Z',
  })
  timestamp: string;
}

/**
 * ExampleCategory - Structure for grouping example queries by category
 * 
 * Used within ExamplesResponseDto to organize example queries into logical groups.
 * Helps users understand different types of queries they can make.
 * 
 * Categories include:
 * - Search: Basic place search queries
 * - Details: Requests for detailed place information
 * - Location: Location-based queries
 * - Photos: Image-related requests
 */
export class ExampleCategory {
  @ApiProperty({
    description: 'Category name - logical grouping for the example queries',
    example: 'Search',
  })
  category: string;

  @ApiProperty({
    description: 'List of example queries in this category - sample queries users can try',
    example: [
      'Find restaurants near me',
      'Search for coffee shops in New York',
    ],
    type: [String],
  })
  examples: string[];
}

/**
 * ExamplesResponseDto - Response structure for the examples endpoint
 * 
 * Provides users with sample queries they can try with the API.
 * Organized by categories to help users understand different use cases.
 * 
 * Endpoint: GET /api/places/examples
 * 
 * Returns static examples that demonstrate the capabilities of the
 * location intelligence system across different query types.
 */
export class ExamplesResponseDto {
  @ApiProperty({
    description: 'Whether the request was successful - always true for examples endpoint',
    example: true,
  })
  success: boolean;

  @ApiProperty({
    description: 'List of example categories with sample queries - organized by use case type',
    type: [ExampleCategory],
  })
  examples: ExampleCategory[];

  @ApiProperty({
    description: 'Timestamp of the response in ISO format - when examples were retrieved',
    example: '2024-08-13T10:30:00.000Z',
  })
  timestamp: string;
}
